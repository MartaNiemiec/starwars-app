{"version":3,"sources":["components/SearchBox.js","components/Card.js","components/Cardlist.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["SearchBox","_ref","searchfield","searchChange","react_default","a","createElement","className","type","placeholder","onChange","Card","title","episode_id","director","producer","release_date","style","lineHeight","CardList","films","map","film","i","components_Card","key","Scroll","props","overflowY","borderTop","height","children","particlesOptions","particles","number","value","density","enable","value_area","color","shape","stroke","width","opacity","random","anim","speed","opacity_min","sync","size","line_linked","move","direction","straight","out_mode","bounce","attract","rotateX","rotateY","interactivity","detect_on","modes","repulse","distance","duration","retina_detect","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","target","state","_this2","fetch","then","response","json","results","_this$state","filteredFilms","filter","toLowerCase","includes","particles_default","params","length","components_SearchBox","components_Scroll","Cardlist","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_containers_App","document","getElementById","URL","process","href","origin","addEventListener","concat","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.12477adc.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange } ) => {\r\n    return (\r\n        <div className=\"pa2\">\r\n            <input \r\n            className=\"pa3 bn bw1 br-pill b--yellow bg-washed-yellow\"\r\n            type=\"search\" \r\n            placeholder=\"search films\"\r\n            onChange={searchChange}\r\n            />\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Card = ({ title, episode_id, director, producer, release_date }) => {\r\n    return ( \r\n        <div className=\" dib bn b--white-30 br4 pa3 ma2 grow bw1 card\">\r\n            <div style={{lineHeight:'1.8'}}>\r\n                <h2 className=\"tc bb bw1 b--yellow mb3\">{title}</h2>\r\n                <p className=\"tl\"><span className=\"b\">Episode:</span> {episode_id}</p>\r\n                <p className=\"tl\"><span className=\"b\">Director:</span> {director}</p>\r\n                <p className=\"tl\"><span className=\"b\">Producer:</span> {producer}</p>\r\n                <p className=\"tl\"><span className=\"b\">Release date:</span> {release_date}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({films}) =>{\r\n  return (\r\n    <div className=\"pa3\">\r\n      { \r\n        films.map((film, i) => {\r\n            return (\r\n                <Card \r\n                key = {i}\r\n                title={films[i].title} \r\n                episode_id={films[i].episode_id} \r\n                director={films[i].director} \r\n                producer={films[i].producer}\r\n                release_date={films[i].release_date}\r\n                />\r\n            );\r\n        })\r\n      }\r\n    </div>\r\n      );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n  <div className=\"mt3\" style={{overflowY: 'scroll', borderTop: '2px solid rgba(250,250,250, 1)', height: '700px'}}> {/* adding a style we heve to put them into {} whis is tor JavaScript expression and  within this we're returning an object and this object can have CSS styles, such as a property \"overflowY\" (not like in CSS overflow-y, we have to camelCase for JSX). */}\r\n    {props.children}\r\n  </div>\r\n  )\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\nimport SearchBox from '../components/SearchBox';\nimport CardList from '../components/Cardlist';\nimport Scroll from '../components/Scroll';\nimport Particles from 'react-particles-js';\nimport './App.css';\n\nconst particlesOptions = {\n  particles: {\n    number: {\n      value: 150,\n      density: {\n        enable: true,\n        value_area: 300\n      }\n    },\n    color: {\n      value: '#ffffff'\n    },\n    shape: {\n      type: 'circle',\n      stroke: {\n        width: 0,\n        color: '#000000'\n      }\n    },\n    opacity: {\n      value: 1,\n      random: true,\n      anim: {\n        enable: true,\n        speed: 1.5,\n        opacity_min: 0,\n        sync: false\n      }\n    },\n    size: {\n      value: 2.5,\n      random: true,\n      anim: {\n        enable: false\n      }\n    },\n    line_linked: {\n      enable: false,\n    },\n    move: {\n      enable: true,\n      speed: .1,\n      direction: 'none',\n      random: true,\n      straight: false,\n      out_mode: 'out',\n      bounce: false,\n      attract: {\n        enable: false,\n        rotateX: 600,\n        rotateY: 600\n      }\n    }\n  },\n  interactivity: {\n    detect_on: 'window',\n    modes: {\n      repulse: {\n        distance: 100,\n        duration: 0.4\n      }\n    }\n  },\n  retina_detect: true\n  }\n\n\nclass App extends Component {\n  // ====== STATE ======\n  // state is something that can change and affect the app; \n  // state lives in the parent component\n  constructor() {\n    super() // calls the constructor of Component\n    this.state = {\n        films: [],\n        searchfield: '' \n    }\n  }\n\n  componentDidMount() {\n    fetch('https://swapi.co/api/films')  //fetch is a part of the window object\n    .then(response => response.json())  //response return a promise\n    .then(films => this.setState({films: films.results}) );\n  }\n\n  // With anything that comes from React, so constructor and render, are pre-built in React, any time we make our own methods on a component, we have to use arrow functions, and this makes sure that the 'this' value is according to where it was created, which is the 'App'\n  onSearchChange = (event) => {   \n    this.setState({ searchfield: event.target.value })\n  }\n\n  render() {\n    const {films, searchfield} = this.state;\n    const filteredFilms = films.filter(film => {\n      return film.title.toLowerCase().includes(searchfield.toLowerCase());\n    })\n    return (\n      <div>\n        <Particles \n        className='particles' \n        params={particlesOptions} \n        />\n          {/*if films.length==0 so it's true, !the opposite is false */}\n        { (!films.length) \n        ? <h1 className='f1 tc'>Loading...</h1> \n        : (\n            <div className='tc'>\n                <h1 className='f1'>STARWARS</h1>\n                <SearchBox searchChange={this.onSearchChange}/>\n                <Scroll>\n                  <CardList films={filteredFilms}/>\n                </Scroll>\n            </div>\n          )}\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}